package main

//
// an indexing application "plugin" for MapReduce. mapreduce 要用到的索引插件
//
// go build -buildmode=plugin indexer.go
//

import "fmt"
import "../mr"

import "strings"
import "unicode"
import "sort"

// map 函数 每次有新的文件传进来都需要被调用一次，在这个框架内，key 是正在处理的文件的名称，value 是文件的内容，
// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mr.KeyValue.
func Map(document string, value string) (res []mr.KeyValue) {
	m := make(map[string]bool)
	// 将文件内容按照非字符做分隔，得到很多由词组成的切片
	words := strings.FieldsFunc(value, func(x rune) bool { return !unicode.IsLetter(x) })
	// 记录每个存在的词（一个词仅记录一次）
	for _, w := range words {
		m[w] = true
	}
	res := []mr.KeyValue
	for w := range m {
		kv := mr.KeyValue{w, document} // kv -> [{"women", "file_1.txt"}, {"nihapo, "file_1.txt"}, ...]
		res = append(res, kv)
	}
	return
}

// The reduce function is called once for each key generated by Map, with a -> {"women": ["file_1.txt", "file_2.txt", ...]}
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func Reduce(key string, values []string) string {
	sort.Strings(values)
	return fmt.Sprintf("%d %s", len(values), strings.Join(values, ","))  // -> '20 file_1.txt,file_2.txt"
}
