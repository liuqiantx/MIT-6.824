package main

//
// 生成计数功能的 map & reduce 插件
//
// go build -buildmode=plugin -o=wc.so wc.go
//

import "../mr"
import "unicode"
import "strings"
import "strconv"

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func Map(filename string, contents string) []mr.KeyValue {
	// function to detect word separators. 返回所有非字符的元素
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words. 按非字符的元素进行完整字符串分割
	words := strings.FieldsFunc(contents, ff)

	kva := []mr.KeyValue{}
	for _, w := range words {
		kv := mr.KeyValue{w, "1"}
		kva = append(kva, kv) // kva = [{"w", "1"}, {"women", "1"}, {"women", "1"}]
	}
	return kva
}

// 还差中间值转换的部分
//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
// {"wo" : ["1", "1", "1"]}  -> 对于每个 key 是什么，需要有记录，此处应该是在外围
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.  将整数转换为字符串型整数
	return strconv.Itoa(len(values))
}
